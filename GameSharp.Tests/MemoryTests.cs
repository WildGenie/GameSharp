using System;
using System.Runtime.InteropServices;
using GameSharp.Native;
using GameSharp.Utilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace GameSharp.Tests
{
    [TestClass]
    public class MemoryTests
    {
        [TestMethod]
        public void ReadWriteTest()
        {
            // Allocate memory
            IntPtr allocatedMemory = Marshal.AllocHGlobal(1024);

            // Get a random byte buffer
            byte[] rndBytes = new byte[1024];
            new Random().NextBytes(rndBytes);

            // Write the random byte buffer to the newly allocated memory.
            Memory.Write(allocatedMemory, rndBytes);

            // Check the byes written to the allocated memory if they are the same as the randomly generated bytes.
            byte[] memValue = Memory.Read<byte[]>(allocatedMemory, 1024);

            for (int i = 0; i < rndBytes.Length; i++)
            {
                // Validate if the bytes are equal.
                Assert.AreEqual(memValue[i], rndBytes[i]);
            }
        }

        [TestMethod]
        public void ReadStructTest()
        {
            // Allocate memory


            // Write a structure to the memory
            
            
            // Read the structure
            
            
            // Test the structure
        }

        struct Test
        {

        }
    }
}
